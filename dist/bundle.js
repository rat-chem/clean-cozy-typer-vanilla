/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const WORD_SIZE = 5;
const QUOTE_API = "https://api.quotable.io/random";
const DEFAULT_KEYBOARD_LAYOUT = [
    ["Escape", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "Backspace"],
    ["Tab", "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "[", "]", "\\"],
    ["CapsLock", "a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "'", "Enter"],
    ["Shift", "z", "x", "c", "v", "b", "n", "m", ",", ".", "/", "Shift"],
    [" "],
];
const SHIFT_ENABLED_KEYBOARD_LAYOUT = [
    ["Escape", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "_", "+", "Backspace"],
    ["Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "{", "}", "|"],
    ["CapsLock", "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "\"", "Enter"],
    ["Shift", "Z", "X", "C", "V", "B", "N", "M", "<", ">", "?", "Shift"],
    [" "],
];
const CAPS_ENABLED_KEYBOARD_LAYOUT = [
    ["Escape", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "=", "Backspace"],
    ["Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\\"],
    ["CapsLock", "A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'", "Enter"],
    ["Shift", "Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "Shift"],
    [" "],
];
const SPECIAL_KEYS = {
    " ": "Spacebar",
    "Shift": "Shift",
    "Tab": "Tab",
    "Enter": "Enter",
    "Backspace": "Backspace",
    "Escape": "Esc",
    "CapsLock": "Caps",
};
let currentQuoteIndex = 0;
let wordsPerMinute = 0;
let wordAccuracy = 0;
let startTime = 0;
let keypressCache = new Map();
let capslockEnabled = false;
function calcWordsPerMinute() {
    let wordElements = document.getElementsByClassName("word");
    let totalCharacters = 0;
    for (let i = 0; i < wordElements.length; i++)
        totalCharacters += wordElements[i].innerHTML.length;
    let incorrectWords = document.getElementsByClassName("incorrect-word").length;
    let minutes = ((Date.now() - startTime) / 1000) / 60;
    wordsPerMinute = Math.round(((totalCharacters / WORD_SIZE) - incorrectWords) / minutes);
}
function calcWordAccuracy() {
    let correctWords = document.getElementsByClassName("correct-word").length;
    let totalWords = document.getElementsByClassName("word").length;
    wordAccuracy = Math.round((correctWords / totalWords) * 100);
}
function fetchQuote() {
    return __awaiter(this, void 0, void 0, function* () {
        let fetchedQuote = yield fetch(QUOTE_API);
        let result = yield fetchedQuote.json();
        return result;
    });
}
function inputKeydownEvent(event) {
    var _a;
    if (startTime === 0 && event.key.match(/^[a-zA-Z]$/))
        startTime = Date.now();
    let inputElement = document.getElementById("input");
    if (event.key === ' ') {
        event.preventDefault();
        let wordElements = (_a = document.getElementById("quote-element")) === null || _a === void 0 ? void 0 : _a.children;
        let wordElementsLength = wordElements === null || wordElements === void 0 ? void 0 : wordElements.length;
        if (currentQuoteIndex === wordElementsLength)
            inputElement.value = '';
    }
    if (event.key === ' ' && inputElement.value !== '') {
        let quoteElement = document.getElementById("quote-element");
        let quoteElementChildren = quoteElement === null || quoteElement === void 0 ? void 0 : quoteElement.children;
        if (quoteElementChildren !== undefined) {
            let currWord = quoteElementChildren[currentQuoteIndex];
            let currWordClassList = currWord.classList;
            if (currWordClassList.contains('current-word'))
                currWordClassList.remove('current-word');
            if (currWord.textContent !== inputElement.value)
                currWordClassList.add('incorrect-word');
            if (currWord.textContent === inputElement.value)
                quoteElementChildren[currentQuoteIndex].classList.add('correct-word');
            if (currentQuoteIndex + 1 < quoteElementChildren.length)
                quoteElementChildren[currentQuoteIndex + 1].classList.add('current-word');
        }
        currentQuoteIndex++;
        if (currentQuoteIndex === (quoteElementChildren === null || quoteElementChildren === void 0 ? void 0 : quoteElementChildren.length)) {
            calcWordAccuracy();
            calcWordsPerMinute();
            initStatistics();
        }
        inputElement.value = '';
    }
}
function initQuote() {
    return __awaiter(this, void 0, void 0, function* () {
        let quote = yield fetchQuote();
        let quoteElement = document.getElementById("quote-element");
        quote.content
            //.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"")
            //.replace(/\s{2,}/g," ")
            .split(' ')
            .map(function (word) {
            let wordElement = document.createElement("div");
            let wordElementTextNode = document.createTextNode(word);
            // wordElement.id = word
            wordElement.classList.add('word');
            wordElement.appendChild(wordElementTextNode);
            quoteElement === null || quoteElement === void 0 ? void 0 : quoteElement.append(wordElement);
        });
        let quoteElementChildren = quoteElement === null || quoteElement === void 0 ? void 0 : quoteElement.children;
        if (quoteElementChildren !== undefined)
            quoteElementChildren[currentQuoteIndex].classList.add('current-word');
    });
}
function initInput() {
    let inputElement = document.getElementById("input");
    inputElement === null || inputElement === void 0 ? void 0 : inputElement.addEventListener("keydown", inputKeydownEvent);
    inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
}
function initVisualKeyboard(layout) {
    let keyboardWrapper = document.getElementById("keyboard-wrapper");
    layout.map(function (row) {
        let keyboardRow = document.createElement("div");
        keyboardRow.classList.add('keyboard-row');
        row.map(function (key) {
            let keyElement = document.createElement("div");
            if (SPECIAL_KEYS[key] !== undefined) {
                key = SPECIAL_KEYS[key];
                keyElement.classList.add(key.toLowerCase());
            }
            keyElement.classList.add('default-key');
            if (key === "Caps" && capslockEnabled)
                keyElement.classList.add('pressed-key');
            keyElement.id = key;
            keyElement.append(key);
            keyboardRow.appendChild(keyElement);
        });
        keyboardWrapper === null || keyboardWrapper === void 0 ? void 0 : keyboardWrapper.appendChild(keyboardRow);
    });
}
function initRefresh() {
    let refreshButton = document.getElementById("refresh");
    refreshButton === null || refreshButton === void 0 ? void 0 : refreshButton.addEventListener("click", function () {
        currentQuoteIndex = 0;
        let wordElement = document.getElementById("quote-element");
        if (wordElement !== null)
            wordElement.innerHTML = '';
        initQuote();
        let inputElement = document.getElementById("input");
        inputElement === null || inputElement === void 0 ? void 0 : inputElement.focus();
        inputElement.value = '';
        wordAccuracy = 0;
        wordsPerMinute = 0;
        initStatistics();
        startTime = 0;
    });
}
function initStatistics() {
    let statisticsElement = document.getElementById("statistics");
    let getWordsPerMinute = wordsPerMinute === 0 ? '??' : wordsPerMinute;
    let getWordAccuracy = wordAccuracy === 0 ? '??' : wordAccuracy;
    let statistics = `WPM=${getWordsPerMinute} | ACC=${getWordAccuracy}%`;
    let statisticsText = document.createTextNode(statistics);
    if ((statisticsElement === null || statisticsElement === void 0 ? void 0 : statisticsElement.innerText) !== undefined)
        statisticsElement.innerText = '';
    statisticsElement === null || statisticsElement === void 0 ? void 0 : statisticsElement.appendChild(statisticsText);
}
document.addEventListener("keydown", function (event) {
    if (keypressCache.get(event.code) === undefined) {
        keypressCache.set(event.code, event.code);
        if (event.key === "CapsLock") {
            let keyboardElement = document.getElementById("keyboard-wrapper");
            keyboardElement.innerHTML = '';
            if (!capslockEnabled) {
                initVisualKeyboard(CAPS_ENABLED_KEYBOARD_LAYOUT);
            }
            else {
                initVisualKeyboard(DEFAULT_KEYBOARD_LAYOUT);
            }
            capslockEnabled = !capslockEnabled;
        }
        if (event.key === "Shift") {
            if (!capslockEnabled) {
                let keyboardElement = document.getElementById("keyboard-wrapper");
                keyboardElement.innerHTML = '';
                initVisualKeyboard(SHIFT_ENABLED_KEYBOARD_LAYOUT);
            }
            else {
                let keyboardElement = document.getElementById("keyboard-wrapper");
                keyboardElement.innerHTML = '';
                initVisualKeyboard(DEFAULT_KEYBOARD_LAYOUT);
            }
            let shiftElements = document.getElementsByClassName("shift");
            shiftElements[1].classList.add('pressed-key');
        }
        let keyElement = document.getElementById(SPECIAL_KEYS[event.key] === undefined ?
            event.key : SPECIAL_KEYS[event.key]);
        if (event.key === 'CapsLock') {
            if (capslockEnabled)
                keyElement === null || keyElement === void 0 ? void 0 : keyElement.classList.add('pressed-key');
            else {
                console.log("borpa");
                keyElement === null || keyElement === void 0 ? void 0 : keyElement.classList.remove('pressed-key');
            }
            return;
        }
        keyElement === null || keyElement === void 0 ? void 0 : keyElement.classList.add('pressed-key');
    }
});
document.addEventListener("keyup", function (event) {
    keypressCache.delete(event.code);
    if (event.key === "CapsLock")
        return;
    if (event.key === "Shift" && !capslockEnabled) {
        let keyboardElement = document.getElementById("keyboard-wrapper");
        keyboardElement.innerHTML = '';
        initVisualKeyboard(DEFAULT_KEYBOARD_LAYOUT);
    }
    if (event.key === "Shift" && capslockEnabled) {
        let shiftElements = document.getElementsByClassName("shift");
        shiftElements[1].classList.remove('pressed-key');
        let keyboardElement = document.getElementById("keyboard-wrapper");
        keyboardElement.innerHTML = '';
        initVisualKeyboard(CAPS_ENABLED_KEYBOARD_LAYOUT);
    }
    let keyElement = document.getElementById(SPECIAL_KEYS[event.key] === undefined ?
        event.key : SPECIAL_KEYS[event.key]);
    keyElement === null || keyElement === void 0 ? void 0 : keyElement.classList.remove('pressed-key');
});
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        initQuote();
        initInput();
        initRefresh();
        initStatistics();
        initVisualKeyboard(DEFAULT_KEYBOARD_LAYOUT);
    });
}
main();


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,